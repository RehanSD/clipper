FROM nvidia/cuda:10.0-devel-ubuntu16.04

LABEL maintainer="Rehan Durrani <rdurrani@berkeley.edu>"

RUN apt-get update \
 && apt-get install -y --no-install-recommends \
	build-essential \
	curl \
	wget \
	software-properties-common \
	python3-pip \
 && add-apt-repository -y ppa:jonathonf/python-3.6 \
 && apt-get update \
 && apt-get install -y python3.6 python3.6-dev \
 && apt-get clean \
 && rm -rf /var/lib/apt/lists/*

RUN python3.6 -m pip install --no-cache-dir -U pip
RUN python3.6 -m pip install --no-cache-dir -U setuptools
RUN ln -s /usr/bin/pip3.6 /usr/bin/pip
RUN ln -s /usr/bin/python3.6 /usr/bin/python

RUN pip install -U --user pip six numpy wheel setuptools mock keras_applications==1.0.6 --no-deps keras_preprocessing==1.0.5 --no-deps

RUN  apt-get install -y gnupg-curl \
 && wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1604/x86_64/cuda-repo-ubuntu1604_10.0.130-1_amd64.deb \
 && apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1604/x86_64/7fa2af80.pub \
 && apt-get update -qq \
 && wget http://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1604/x86_64/nvidia-machine-learning-repo-ubuntu1604_1.0.0-1_amd64.deb \
 && apt-get update \
 && apt-get install -y --no-install-recommends \
	libcudnn7=7.4.1.5-1+cuda10.0 \
	libcudnn7-dev=7.4.1.5-1+cuda10.0 \
 && apt-get update -qq \
 && apt-get install -y nvinfer-runtime-trt-repo-ubuntu1604-5.0.2-ga-cuda10.0 \
 && apt-get update -qq \
 && apt-get install -y --no-install-recommends libnvinfer5=5.0.2-1+cuda10.0 \
 && apt-get install -y --no-install-recommends libnvinfer-dev=5.0.2-1+cuda10.0

RUN apt-get update -qq

RUN apt-get install -y libssl-dev libffi-dev

RUN mkdir -p /model \
      && apt-get update -qq \
      && apt-get install -y -qq libzmq5 libzmq5-dev redis-server libsodium18

RUN pip install tensorflow-gpu==1.13.1 pyyaml==3.12.* cloudpickle==0.5.* pyopenssl pyzmq==17.0.* prometheus_client==0.1.* \
    jsonschema==2.6.* redis==2.10.* psutil==5.4.* flask==0.12.2 \
    numpy==1.14.*

COPY clipper_admin /clipper_admin/

RUN cd /clipper_admin \
                && pip install .

WORKDIR /container

COPY containers/python/__init__.py containers/python/rpc.py /container/

COPY monitoring/metrics_config.yaml /container/

ENV CLIPPER_MODEL_PATH=/model

HEALTHCHECK --interval=3s --timeout=3s --retries=1 CMD test -f /model_is_ready.check || exit 1

COPY containers/python/tf_container.py containers/python/container_entry.sh /container/

CMD ["/container/container_entry.sh", "tensorflow-container", "/container/tf_container.py"]

# vim: set filetype=dockerfile:
